name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-advanced.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-advanced.txt
          cd src/python && pip install -r requirements.txt
      
      - name: Install pre-commit
        run: |
          pip install pre-commit
      
      - name: Run pre-commit
        run: |
          pre-commit run --all-files
      
      - name: Run MyPy (type checking)
        run: |
          mypy src/python/core/ --ignore-missing-imports || true

  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('src/python/requirements.txt', 'requirements-advanced.txt') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.python-version }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-advanced.txt
          cd src/python && pip install -r requirements.txt
          pip install pytest pytest-cov pytest-xdist pytest-timeout
      
      - name: Run tests
        run: |
          cd src/python
          pytest tests/ -v --cov=core --cov=cli --cov-report=xml --cov-report=term --timeout=60
      
      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./src/python/coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-advanced.txt
          cd src/python && pip install -r requirements.txt
          pip install pytest pytest-timeout
      
      - name: Run integration tests
        run: |
          cd src/python
          pytest tests/test_integration.py -v --timeout=120
      
      - name: Test CLI commands
        run: |
          cd src/python
          python cli.py config --create test_config.json
          python cli.py config --validate test_config.json
          python cli.py plugins --list || true

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-advanced.txt
          pip install bandit safety
          cd src/python && pip install -r requirements.txt
      
      - name: Run Bandit (security linter)
        run: |
          bandit -r src/python/core/ -ll || true
      
      - name: Check dependencies for vulnerabilities
        run: |
          safety check --file=src/python/requirements.txt || true

  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-advanced.txt
          cd src/python && pip install -r requirements.txt
      
      - name: Check documentation exists
        run: |
          ls -la docs/ || echo "Docs directory check complete"

  performance:
    name: Performance Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-advanced.txt
          cd src/python && pip install -r requirements.txt
          pip install pytest pytest-benchmark
      
      - name: Run performance benchmarks
        run: |
          cd src/python
          echo "Benchmark placeholder - add performance tests"

